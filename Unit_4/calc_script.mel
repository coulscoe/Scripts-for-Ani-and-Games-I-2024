//calculates sum of an array
global proc float sum(float $input[])
{
    float $total=0;
    for($i=0; $i<=size($input)-1; $i++)
    {
        $total+=$input[$i];
    }
    return $total;
}

//calculates difference of an array
global proc float difference (float $input[])
{
    float $total=0;
    for($i=0; $i<=size($input)-1; $i++)
    {
        if ($i==0)
        {
            $total+=$input[$i];
        }
        else
        {
            $total-=$input[$i];
        }
    }
    return $total;
}

//multiples an array
global proc float multiplication(float $input[])
{
    float $total=0;
    for($i=0; $i<=size($input)-1; $i++)
    {
        if ($i==0)
        {
            $total+=$input[$i];
        }
        else
        {
            $total*=$input[$i];
        }
    }
    return $total;
}

//divides an array
global proc float division (float $input[])
{
    float $total=0;
    for($i=0; $i<=size($input)-1; $i++)
    {
        if ($i==0)
        {
            $total+=$input[$i];
        }
        else
        {
            $total/=$input[$i];
        }
    }
    return $total;
}

//caculates the power of two numbers
global proc float power(float $input[])
{
    $total= pow($input[0],$input[1]);
    return $total;
}

//caculates mean
global proc float mean(float $input[])
{
    float $total=0;
    for($i=0; $i<=size($input)-1; $i++)
    {
        $total+=$input[$i];
    }
    return $total/size($input);
}

//finds the median of an array
global proc float median(float $input[])
{
    $input= `sort $input`;
    float $midInt;
    int $mid=(size($input)/2);
    if (size($input)%2==0)
    {
        $midInt=($input[$mid]+$input[$mid-1])/2;
    }
    else
    {
        $midInt= $input[$mid];
    }
    return $midInt;
}

// determineds the kind of operation from a word, to calculate total
global proc calculator(float $input[], string $operation)
{
    string $sign;
    float $total;
    if ($operation == "sum")
    {
        $total= `sum($input)`;
        $sign="+";
    }
    else if ($operation == "difference")
    {
        $total = `difference($input)`;
        $sign="-";
    }
    else if ($operation == "multiplication")
    {
        $total=`multiplication($input)`;
        $sign="*";
    }
    else if ($operation == "division")
    {
        $total = `division($input)`;
        $sign="/";
    }
    else if ($operation == "power")
    {
        $total =`power($input)`;
        $sign="^";
    }
    else if ($operation == "mean")
    {
        $total=`mean($input)`;
        $sign="+";
    }
    else if ($operation == "median")
    {
        $total=`median($input)`;
        $sign=",";
    }
    else 
    {
        print("Input valid operation word.");
    }
    string $resultString;
    for ($i=0; $i<=size($input)-1; $i++)
    {
        if($operation == "median")
        {
            $input= `sort $input`;
        }
        if ($i==size($input)-1)
        {
            $resultString += $input[$i];
        }
        else
        {
            $resultString += $input[$i] + $sign;
        }
    }
    if ($operation== "mean")
    {
        $resultString+="/"+ size($input)+"="+ $total;

    }
    else
    {
        $resultString+="="+ $total;
    }
    print($resultString);
    print($total);
}
global string $mColumn;

global proc calculatorUI() {
    // Destroy the window if it exists
    if (`window -exists calculatorWin`) {
        deleteUI calculatorWin;
    }

    // Create a new window
    window -title "Array Calculator" -widthHeight 300 400 calculatorWin;

    // Create a column layout
    columnLayout -adjustableColumn true;
    $mColumn = `setParent -q`;

    // Add initial floatFields
    for ($i = 0; $i < 5; $i++) {
        floatField -parent $mColumn -annotation ("Index " + $i);
    }

    // Button to add more fields
    button -label "Add FloatField" -command "addFloatField";

    // Dropdown menu for operation selection
    optionMenu -label "Select Operation" operationMenu;
    menuItem -label "Sum";
    menuItem -label "Difference";
    menuItem -label "Multiplication";
    menuItem -label "Division";
    menuItem -label "Power";
    menuItem -label "Mean";
    menuItem -label "Median";

    // Button to calculate result
    button -label "Calculate" -command "calculateResult";

    // Text field to display result
    textField -editable false -parent $mColumn resultField;

    showWindow calculatorWin;
}

global proc addFloatField() {
    global string $mColumn;
    // Ensure the layout context is set correctly
    setParent $mColumn;
    // Create a new floatField in the existing column layout
    floatField -parent $mColumn -annotation ("New Index");
}

global proc calculateResult() {
    global string $mColumn;
    string $children[] = `columnLayout -query -childArray $mColumn`;
    float $arrayValues[];
    string $operation = `optionMenu -query -value operationMenu`;

    // Collect values from floatFields
    for ($i = 0; $i < size($children); $i++) {
        if (`floatField -exists $children[$i]`) {
            float $value = `floatField -query -value $children[$i]`;
            $arrayValues[$i] = $value;
        }
    }

    // Perform the selected operation
    float $result;
    if ($operation == "Sum") {
        $result = sum($arrayValues);
    } else if ($operation == "Difference") {
        $result = difference($arrayValues);
    } else if ($operation == "Multiplication") {
        $result = multiplication($arrayValues);
    } else if ($operation == "Division") {
        $result = division($arrayValues);
    } else if ($operation == "Power") {
        $result = power($arrayValues);
    } else if ($operation == "Mean") {
        $result = mean($arrayValues);
    } else if ($operation == "Median") {
        $result = median($arrayValues);
    } else {
        print("Input valid operation word.\n");
        return;
    }

    // Display the result
    textField -edit -text ("Result: " + $result) resultField;
}

// Run the UI
calculatorUI();

//the power operation only takes two numbers
// global proc calcUI()
// {
//     int $numArray;
//     string $numArrayName;
//     //destroys window if its exsists and makes a new one
//     string $mWindow = "gen_window";
//     if (`window -exists $mWindow`)
//         deleteUI $mWindow;

//     //specifies functionalities of the window
//     $mWindow= `window -widthHeight 25 25 -resizeToFitChildren 0 -title "Calculator" $mWindow`; 
//     string $mColumn = `columnLayout -adjustableColumn 1 -columnWidth 50`;
//     //saves variables that are imputed into the window
//     text -label "Input length of Array";
//     optionVar -stringValue "numArray" `intField -parent $mColumn`;
//     button -label "Array Update" -command "updateUI";
//     showWindow $mWindow;
// }
// global proc updateUI()
// {
//     $numArrayName= `optionVar -q "numArray"`;
//     $numArray= `intField -q -value $numArrayName`;
//     for($i=0;$i>=$numArray;$i++)
//     {
//         optionVar -stringValue "numArray" + $i"" `intField -parent $mColumn`;
//     }
// }
// global string $mColumn;

// global proc arrayInputUI() {
//     // Destroy the window if it exists
//     if (`window -exists arrayInputWin`) {
//         deleteUI arrayInputWin;
//     }

//     // Create a new window
//     window -title "Array Input" -widthHeight 300 200 arrayInputWin;

//     // Create a column layout
//     columnLayout -adjustableColumn true dynamicColumn;
//     $mColumn = "dynamicColumn";

//     // Add initial intFields
//     for ($i = 0; $i < 5; $i++) {
//         intField -parent $mColumn -annotation ("Index " + $i);
//     }

//     // Button to add more fields
//     button -label "Add IntField" -command "addIntField";

//     // Button to submit the array
//     button -label "Submit" -command "getArrayValues";

//     showWindow arrayInputWin;
// }

// global proc addIntField() {
//     global string $mColumn;
//     // Ensure the layout context is set correctly
//     setParent dynamicColumn;
//     // Create a new intField in the existing column layout
//     intField -parent dynamicColumn -annotation ("New Index");
    
// }

// global proc getArrayValues() {
//     global string $mColumn;
//     // Query all intFields and store values in an array
//     string $children[] = `columnLayout -query -childArray dynamicColumn`;
//     int $arrayValues[];

//     for ($i = 0; $i < size($children); $i++) {
//         int $value = `intField -query -value $children[$i]`;
//         $arrayValues[$i] = $value;
//     }

//     // Print the array values
//     for ($i = 0; $i < size($arrayValues); $i++) {
//         print ("Array Value[" + $i + "]: " + $arrayValues[$i] + "\n");
//     }
// }

// // Run the UI
// arrayInputUI();